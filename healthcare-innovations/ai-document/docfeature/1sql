BEGIN
  document_ai_pk.process_file (p_apex_file_name => :P23_RECEIPT_FILE, x_document_id => :P23_DOCUMENT_ID); 
END; 
--==============
SELECT file_name
,      mime_type
,      language_code
,      TO_CHAR(ROUND(language_score * 100 ,1),'fm999.0') || '%' language_score
,      INITCAP(document_type_code) document_type
,      TO_CHAR(ROUND(document_type_score * 100,1),'fm999.0') || '%' document_type_score
,      page_count
FROM   document_ai_docs
WHERE  document_id = :P5_DOCUMENT_ID
--================
SELECT field_label
,      ROUND(label_score * 100,0) label_score
,      field_value
FROM   document_ai_fields
WHERE  document_id = :P5_DOCUMENT_ID
ORDER BY field_label
--- Table ================ DOCUMENT_AI_DOCS
CREATE TABLE  "DOCUMENT_AI_DOCS" 
   (	"DOCUMENT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FILE_NAME" VARCHAR2(100) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"MIME_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"OBJECT_STORE_URL" VARCHAR2(1000) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"DOC_AI_JSON" CLOB COLLATE "USING_NLS_COMP", 
	"LANGUAGE_CODE" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"LANGUAGE_SCORE" NUMBER, 
	"DOCUMENT_TYPE_CODE" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"DOCUMENT_TYPE_SCORE" NUMBER, 
	"PAGE_COUNT" NUMBER, 
	"STATUS_CODE" VARCHAR2(25) COLLATE "USING_NLS_COMP" DEFAULT ON NULL 'WIP' NOT NULL ENABLE, 
	"CREATION_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"LAST_UPDATE_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE NOT NULL ENABLE, 
	"LAST_UPDATED_BY" VARCHAR2(255) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"LABEL1" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"LABEL1_SCORE" NUMBER, 
	"LABEL2" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"LABEL2_SCORE" NUMBER, 
	"AISPEECHTRANS_JOBID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"AISPEECH_PREFIX" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "DOCUMENT_AI_DOCS_PK" PRIMARY KEY ("DOCUMENT_ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "DOCUMENT_AI_DOCS_BIU" 
BEFORE INSERT OR UPDATE ON DOCUMENT_AI_DOCS FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :new.created_by       := COALESCE(SYS_CONTEXT('APEX$SESSION','APP_USER'),SYS_CONTEXT('USERENV', 'SESSION_USER'));
    :new.creation_date    := current_timestamp;
    :new.last_updated_by  := COALESCE(SYS_CONTEXT('APEX$SESSION','APP_USER'),SYS_CONTEXT('USERENV', 'SESSION_USER'));
    :new.last_update_date := current_timestamp;
  ELSIF UPDATING THEN
    :new.last_updated_by  := COALESCE(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    :new.last_update_date := current_timestamp;
  END IF;
END;

/
ALTER TRIGGER  "DOCUMENT_AI_DOCS_BIU" ENABLE
/

--============== plsql package specs
create or replace PACKAGE DOCUMENT_AI_PK AS  
  GC_OCI_OBJ_STORE_BASE_URL  CONSTANT VARCHAR2(500)  := 'https://objectstorage.us-phoenix-1.oraclecloud.com/n/oradbclouducm/b/X-Ray-Images-Staging/o/DocumentAI/'; 
  GC_OCI_DOC_AI_URL          CONSTANT VARCHAR2(500)  := 'https://vision.aiservice.us-phoenix-1.oci.oraclecloud.com/20220125/actions/analyzeDocument'; 
  GC_OCI_DOC_AI_TIMEOUT_SECS CONSTANT NUMBER         := 15; 
  GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := 'Ind_OCI_WebCred'; --APEX_OCI_BLOG_CREDENTIAL 
  GC_OCY_DOC_AI_PAYLOAD      CONSTANT VARCHAR2(32000) := '{ 
  "compartmentId": "ocid1.compartment.oc1..aaaaaaaaud6tkdn6n23cbvc4hexs6n4hggetkwo4viqyneyroixcmj54u32q", 
  "document": { 
    "namespaceName": "oradbclouducm", 
    "bucketName": "X-Ray-Images-Staging", 
    "objectName": "DocumentAI/#FILE_NAME#", 
    "source": "OBJECT_STORAGE" 
  }, 
  "features": [ 
    { 
      "featureType": "TEXT_DETECTION",
      "generateSearchablePdf": true 
    }, 
    { 
      "featureType": "DOCUMENT_CLASSIFICATION", 
      "maxResults": 5 
    }, 
    { 
      "featureType": "LANGUAGE_CLASSIFICATION", 
      "maxResults": 5 
    }, 
    { 
      "featureType": "KEY_VALUE_DETECTION" 
    }, 
    { 
      "featureType": "TABLE_DETECTION" 
    } 
  ] 
}'; 
    
PROCEDURE process_file 
  (p_apex_file_name  IN VARCHAR2, 
   x_document_id    OUT document_ai_docs.document_id%TYPE); 
 
PROCEDURE render_document 
  (x_document_id  IN document_ai_docs.document_id%TYPE); 
   
END DOCUMENT_AI_PK;
--============== plsql package body
create or replace PACKAGE BODY DOCUMENT_AI_PK  
IS 
------------------------------------------------------------------------------- 
PROCEDURE put_file 
 (p_mime_type         IN VARCHAR2, 
  p_file_blob         IN BLOB, 
  p_file_name         IN VARCHAR2, 
  x_object_store_url OUT VARCHAR2) IS 
 
  l_response            CLOB; 
 
BEGIN 
 
  -- Build the full Object Storage URL. 
  x_object_store_url := GC_OCI_OBJ_STORE_BASE_URL || p_file_name; 
 
  -- Set Mime Type of the file in the Request Header. 
  apex_web_service.g_request_headers.DELETE; 
  apex_web_service.g_request_headers(1).name  := 'Content-Type'; 
  apex_web_service.g_request_headers(1).value := p_mime_type; 
 
  -- Call Web Service to PUT file in OCI. 
  l_response := apex_web_service.make_rest_request 
   (p_url                  => UTL_URL.ESCAPE(x_object_store_url), 
    p_http_method          => 'PUT', 
    p_body_blob            => p_file_blob, 
    --p_credential_static_id => GC_WC_CREDENTIAL_ID); 
    p_credential_static_id => GC_WC_CREDENTIAL_ID); 
 
  IF apex_web_service.g_status_code != 200 then 
    raise_application_error(-20111,'Unable to Upload File to OCI.'); 
  END IF; 
 
EXCEPTION WHEN OTHERS THEN 
  RAISE; 
END put_file; 
 
-------------------------------------------------------------------------------- 
  
-------------------------------------------------------------------------------- 
PROCEDURE upload_file 
  (p_apex_file_name    IN VARCHAR2, 
   x_file_name        OUT VARCHAR2, 
   x_object_store_url OUT VARCHAR2, 
   x_document_id      OUT document_ai_docs.document_id%TYPE) IS 
 
  CURSOR cr_file_info IS 
    SELECT filename 
    ,      blob_content 
    ,      mime_type 
    FROM   apex_application_temp_files 
    WHERE  name = p_apex_file_name; 
 
  lr_file_info          cr_file_info%ROWTYPE; 
 
BEGIN 
 
  -- Get the File BLOB Content and File Name uploaded from APEX. 
  OPEN  cr_file_info; 
  FETCH cr_file_info INTO lr_file_info; 
  CLOSE cr_file_info; 
   
  x_file_name := lr_file_info.filename; 
   
  -- Post file to OCI Object Store. 
  put_file 
   (p_mime_type        => lr_file_info.mime_type, 
    p_file_blob        => lr_file_info.blob_content, 
    p_file_name        => lr_file_info.filename, 
    x_object_store_url => x_object_store_url); 
 
  -- Create Document Record 
  INSERT INTO document_ai_docs (file_name, mime_type, object_store_url) 
  VALUES (lr_file_info.filename, lr_file_info.mime_type, x_object_store_url)  
  RETURNING document_id INTO x_document_id; 
 
EXCEPTION WHEN OTHERS THEN 
  RAISE; 
END upload_file; 
 
-------------------------------------------------------------------------------- 
-------------------------------------------------------------------------------- 
PROCEDURE document_ai 
  (p_file_name   IN VARCHAR2, 
   p_document_id IN document_ai_docs.document_id%TYPE) IS 
 
  CURSOR cr_document_data (cp_json IN CLOB) IS 
    SELECT jt.* 
    FROM   JSON_TABLE(cp_json, '$' 
             COLUMNS (document_type_code      VARCHAR2(50)  PATH '$.detectedDocumentTypes[0].documentType', 
                      document_type_score     NUMBER        PATH '$.detectedDocumentTypes[0].confidence', 
                      language_code           VARCHAR2(50)  PATH '$.detectedLanguages[0].languageCode', 
                      language_score          NUMBER        PATH '$.detectedLanguages[0].confidence', 
                      page_count              NUMBER        PATH '$.documentMetadata.pageCount')) jt; 
 
  CURSOR cr_document_fields (cp_json IN CLOB) IS 
    SELECT jt.* 
    FROM   JSON_TABLE(cp_json, '$.words[*]' 
             COLUMNS (page_number       NUMBER        PATH '$.pageNumber', 
                      NESTED PATH '$.documentFields[*]' COLUMNS 
                       (field_type_code VARCHAR2(50)   PATH '$.text', 
                        field_label     VARCHAR2(100)  PATH '$.text.name', 
                        label_score     NUMBER         PATH '$.fieldLabel.confidence', 
                        field_value     VARCHAR2(1000) PATH '$.fieldValue.value' 
                        ))) jt 
    WHERE  jt.field_type_code = 'KEY_VALUE'; 
 
  l_request_json        VARCHAR2(32000); 
  l_response_json       CLOB; 
  lr_document_data      cr_document_data%ROWTYPE; 
 
BEGIN 
 
  -- Replace the uploaded filename in the JSON payload to be sent to Document AI. 
  l_request_json := REPLACE(GC_OCY_DOC_AI_PAYLOAD, '#FILE_NAME#', p_file_name); 
 
  -- Set Content-Type in the Request Header. This is required by the Document AI REST Service. 
  apex_web_service.g_request_headers.DELETE; 
  apex_web_service.g_request_headers(1).name  := 'Content-Type'; 
  apex_web_service.g_request_headers(1).value := 'application/json'; 
 
  -- Call the Document AI analyzeDocument REST Web Service. 
  l_response_json := apex_web_service.make_rest_request 
   (p_url                  => GC_OCI_DOC_AI_URL, 
    p_http_method          => 'POST', 
    p_body                 => l_request_json, 
    p_credential_static_id => GC_WC_CREDENTIAL_ID);
    --p_credential_static_id => 'APEX_OCI_BLOG_CREDENTIAL'); 
 
  IF apex_web_service.g_status_code != 200 then 
    raise_application_error(-20112,'Unable to call OCI Document AI.'); 
  END IF; 
 
  -- Get Document Level Data from the JSON response. 
  OPEN  cr_document_data (cp_json => l_response_json); 
  FETCH cr_document_data INTO lr_document_data; 
  CLOSE cr_document_data; 
 
  -- Get Key Value Fields from JSON and populate table. 
  FOR r_field IN cr_document_fields (cp_json => l_response_json) LOOP 
    INSERT INTO document_ai_fields (document_id,field_type_code,field_label,label_score,field_value) 
    VALUES (p_document_id,r_field.field_type_code,r_field.field_label,r_field.label_score,r_field.field_value); 
  END LOOP; 
   
  -- Update Document Table with Results. 
  UPDATE document_ai_docs 
  SET    doc_ai_json         = l_response_json 
  ,      language_code       = lr_document_data.language_code 
  ,      language_score      = lr_document_data.language_score 
  ,      document_type_code  = lr_document_data.document_type_code 
  ,      document_type_score = lr_document_data.document_type_score 
  ,      page_count          = lr_document_data.page_count 
  WHERE  document_id         = p_document_id; 
 
EXCEPTION WHEN OTHERS THEN 
  RAISE; 
END document_ai; 
 
-------------------------------------------------------------------------------- 
-------------------------------------------------------------------------------- 
PROCEDURE process_file 
  (p_apex_file_name  IN VARCHAR2, 
   x_document_id    OUT document_ai_docs.document_id%TYPE) IS 
 
  l_object_store_url    VARCHAR2(1000); 
  l_file_name           VARCHAR2(100); 
 
BEGIN 
 
  -- Get file and upload to OCI Object Storage. 
  upload_file 
   (p_apex_file_name   => p_apex_file_name,  
    x_file_name        => l_file_name, 
    x_object_store_url => l_object_store_url, 
    x_document_id      => x_document_id); 
 
  -- Call OCI Document AI and parse the results. 
  document_ai 
    (p_file_name   => l_file_name, 
     p_document_id => x_document_id); 
 
EXCEPTION WHEN OTHERS THEN 
  RAISE; 
END process_file; 
 
-------------------------------------------------------------------------------- 
-------------------------------------------------------------------------------- 
FUNCTION get_file (p_request_url IN VARCHAR2) RETURN BLOB IS 
 
  l_file_blob           BLOB; 
 
BEGIN 
 
  -- Call OCI Web Service to get the requested file. 
  l_file_blob := apex_web_service.make_rest_request_b 
   (p_url                  => UTL_URL.ESCAPE(p_request_url), 
    p_http_method          => 'GET', 
    p_credential_static_id => GC_WC_CREDENTIAL_ID); 
 
  IF apex_web_service.g_status_code != 200 then 
    raise_application_error(-20112,'Unable to Get File.'); 
  END IF; 
   
  RETURN l_file_blob; 
   
EXCEPTION WHEN OTHERS THEN 
  RAISE; 
END get_file; 
 
-------------------------------------------------------------------------------- 
-------------------------------------------------------------------------------- 
PROCEDURE render_document 
  (x_document_id  IN document_ai_docs.document_id%TYPE) IS 
 
  CURSOR cr_document IS 
    SELECT mime_type 
    ,      object_store_url 
    FROM   document_ai_docs 
    WHERE  document_id = x_document_id; 
 
  lr_document           cr_document%ROWTYPE; 
  l_file_blob           BLOB; 
 
BEGIN 
 
  -- Get the OCI URL and Mimetytpe of the receipt file. 
  OPEN  cr_document; 
  FETCH cr_document INTO lr_document; 
  CLOSE cr_document; 
 
  -- Get the file BLOB from OCI Object Storage. 
  l_file_blob := get_file (p_request_url => lr_document.object_store_url); 
 
  -- Output the file so it shows in APEX. 
  owa_util.mime_header(lr_document.mime_type,false); 
  htp.p('Content-Length: ' || dbms_lob.getlength(l_file_blob));  
  owa_util.http_header_close;   
  wpg_docload.download_file(l_file_blob); 
 
EXCEPTION WHEN OTHERS THEN 
  RAISE; 
END render_document; 
  
END;

---============= document_ai_fields table ===========

CREATE TABLE  "DOCUMENT_AI_FIELDS" 
   (	"WORD_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DOCUMENT_ID" NUMBER NOT NULL ENABLE, 
	"FIELD_TYPE_CODE" VARCHAR2(50) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"FIELD_LABEL" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"LABEL_SCORE" NUMBER, 
	"FIELD_VALUE" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"CREATION_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"LAST_UPDATE_DATE" TIMESTAMP (6) WITH LOCAL TIME ZONE NOT NULL ENABLE, 
	"LAST_UPDATED_BY" VARCHAR2(255) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"EXPENSE" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "DOCUMENT_AI_FIELDS_PK" PRIMARY KEY ("WORD_ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/

CREATE INDEX  "DOCUMENT_AI_FIELDS_N1" ON  "DOCUMENT_AI_FIELDS" ("DOCUMENT_ID")
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "DOCUMENT_AI_FIELDS_BIU" 
BEFORE INSERT OR UPDATE ON CNDEMO_DOCUMENT_AI_FIELDS FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :new.created_by       := COALESCE(SYS_CONTEXT('APEX$SESSION','APP_USER'),SYS_CONTEXT('USERENV', 'SESSION_USER'));
    :new.creation_date    := current_timestamp;
    :new.last_updated_by  := COALESCE(SYS_CONTEXT('APEX$SESSION','APP_USER'),SYS_CONTEXT('USERENV', 'SESSION_USER'));
    :new.last_update_date := current_timestamp;
  ELSIF UPDATING THEN
    :new.last_updated_by  := COALESCE(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    :new.last_update_date := current_timestamp;
  END IF;
END;

/
ALTER TRIGGER  "DOCUMENT_AI_FIELDS_BIU" ENABLE
/